plugins {
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id 'checkstyle'
}

group = "org.guardiandevelopment"
version = "${property('org.guardiandevelopment.yak.version')}"
sourceCompatibility = JavaVersion.VERSION_17

java {
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation platform("org.apache.logging.log4j:log4j-bom:${log4jVersion}")
    implementation "org.apache.logging.log4j:log4j-api"

    testImplementation "org.apache.logging.log4j:log4j-core"
    testImplementation "org.apache.logging.log4j:log4j-slf4j2-impl"

    testImplementation platform("org.junit:junit-bom:${junitVersion}")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.assertj:assertj-core:${assertJVersion}"
    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"
}

jacocoTestReport {
    dependsOn tasks.withType(Test)
    reports {
        html.enabled true
    }
    executionData tasks.withType(Test)
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    executionData jacocoTestReport.executionData
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.80
            }
        }
    }
}

checkstyle {
    configDirectory = file("${rootProject.rootDir}/config/checkstyle")
    maxErrors = 0
    maxWarnings = 0
}

javadoc {
    options.addBooleanOption('html5', true)
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    testLogging {
        events "failed", "passed"
    }

    systemProperty "junit.jupiter.execution.parallel.enabled", "true"
    systemProperty "junit.jupiter.execution.parallel.mode.default", "same_thread"
    systemProperty "junit.jupiter.execution.parallel.mode.classes.default", "concurrent"

    jvmArgs('--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.util.zip=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/jdk.internal.ref=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.base/java.lang=ALL-UNNAMED')
    jvmArgs('--add-opens', 'java.management/sun.management=ALL-UNNAMED')
    jvmArgs('--add-opens', 'jdk.management/com.sun.management.internal=ALL-UNNAMED')
    jvmArgs('--add-modules', 'java.se')
}

check.dependsOn jacocoTestReport
check.finalizedBy javadoc, jacocoTestCoverageVerification
